@using TakeNoteBlazor.Shared
@using TakeNoteBlazor.Client.ViewModels
<EditForm Model="@ViewModel"
		  OnValidSubmit="@(async () => await FormSubmit.InvokeAsync(ViewModel.IsNew))"
		  OnInvalidSubmit="InvalidCommitHandler">
	<DataAnnotationsValidator />
	<div class="form-group small">
		<div>
			<div>
				<label class="col-form-label-sm">Author :</label>
				<span class="form-text">@ViewModel.Author</span>
			</div>
		</div>
		<div>
			<div>
				<label class="col-form-label-sm">Title :</label>
				<InputText @bind-Value="@ViewModel.Title" />
				<ValidationMessage For="@(() => ViewModel.Title)" />
			</div>
		</div>
		@if (ViewModel.Note is not null)
		{
		<div>
			<div>
				<label class="col-form-label-sm">Content :</label>
				<InputTextArea @bind-Value="@ViewModel.Note.Content" Rows="4" Cols="25"/>
				<ValidationMessage For="@(() => ViewModel.Note.Content)" />
			</div>
		</div>
		}
		else if (ViewModel.Question is not null)
		{
		}
		else if (ViewModel.Card is not null)
		{
		}
		<button type="submit" class="btn-sm btn btn-success">
			@ButtonText
		</button>
	</div>
</EditForm>

@code {
	[Parameter] public FormViewModel ViewModel { get; set; }
	[Parameter] public string ButtonText { get; set; }
	[Parameter] public EventCallback<bool> FormSubmit { get; set; }
	//[CascadingParameter]
	//public Object _Parent { get; set; }

	private void InvalidCommitHandler()
	{
		Console.WriteLine("invalid commit of post");
	}

	protected override Task OnParametersSetAsync()
	{
		return base.OnParametersSetAsync();
	}

}