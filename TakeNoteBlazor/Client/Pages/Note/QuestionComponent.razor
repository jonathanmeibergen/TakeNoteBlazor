@page "/question"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Authorization
@using TakeNoteBlazor.Shared

@implements IDisposable
<div class="container">
	<div class="card">
		@*<div class="card-header"></div>*@
		<div class="card-body">
			<div class="card-title">Question</div>
			<div class="card-text">What is the definition of x?</div>
		</div>
		@*<div class="card-footer"></div>*@
	</div>
	<br />
	@if (question.Answer != default)
	{
		<div class="card text-dark bg-light">
			<div class="card-body">
				<input type="text" maxlength="64" @bind="@answerOpen" />
			</div>
		</div>
		<button @onclick="SendOpenAnswer" disabled="@(!IsConnected)">Send</button>

	}
	else if (question.AnswerChar != default)
	{
		<div class="card text-dark bg-light">
			@*<div class="card-header"></div>*@
			<div class="card-body container">
				<div class="row">
					<div class="btn btn-sm small @CheckAnswerStyle('a')" @onclick="@((e) => SetAnswer(e, 'a'))">Antwoord A</div>
					<div class="btn btn-sm small @CheckAnswerStyle('b')" @onclick="@((e) => SetAnswer(e, 'b'))">Antwoord B</div>
				</div>
				<div class="row">
					<div class="btn btn-sm small @CheckAnswerStyle('c')" @onclick="@((e) => SetAnswer(e, 'c'))">Antwoord C</div>
					<div class="btn btn-sm small @CheckAnswerStyle('d')" @onclick="@((e) => SetAnswer(e, 'd'))">Antwoord D</div>
				</div>
			</div>
			@*<div class="card-footer"></div>*@
		</div>
		<button @onclick="SendAnswer" disabled="@(!IsConnected)">Send</button>
	}
	@*@if (messages != default)*@
	@*{*@
	<div class="text-dark">
		@foreach (var message in messages)
		{
			<p>@message</p>
		}
	</div>
	@*}*@
</div>
@code {
	private HubConnection hubConnection;
	private string answerOpen = default;
	private char answerChar = default;
	private char correctAnswer = default;
	private List<string> messages = new List<string>();

	[Inject]
	public NavigationManager NavigationManager { get; set; }

	[Inject]
	public IAccessTokenProvider AccessTokenProvider { get; set; }

	private string CheckAnswerStyle(char answer)
	{
		return answerChar.Equals(answer) ? "btn-primary" : "btn-outline-primary";
	}

	private void SetAnswer(MouseEventArgs e, char answer)
	{
		answerChar = answer;
		ShouldRender();
	}

	////[Parameter]
	public Question question = new Question
	{
		Id = 1,
		AnswerA = "a",
		AnswerB = "b",
		AnswerC = "c",
		AnswerD = "d",
		AnswerChar = 'b'
	};

	public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

	async Task SendOpenAnswer() => await hubConnection.SendAsync("sendAnswer", answerOpen);
	async Task SendAnswer() => await hubConnection.SendAsync("SendAnswer", question.GetAnswer(answerChar));

	protected override async Task OnInitializedAsync()
	{
		//answerChar = 'b';

		hubConnection = new HubConnectionBuilder()
		.WithUrl(NavigationManager.ToAbsoluteUri("/questionhub"), options =>
		{
			options.AccessTokenProvider = async () =>
			{
				var accessTokenResult = await AccessTokenProvider.RequestAccessToken();
				accessTokenResult.TryGetToken(out var accessToken);
				return accessToken.Value;
			};
		})
		.Build();

		hubConnection.On<string>("ReceiveMessage", (message) =>
		{
			messages.Add(message);
			var hello = "";
			Console.WriteLine(hello);
			StateHasChanged();
		});

		await hubConnection.StartAsync();
	}

	public void Dispose()
	{
		_ = hubConnection.DisposeAsync();
	}

}
